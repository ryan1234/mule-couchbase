/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.sorc.mule.connector.couchbase;

import java.io.IOException;
import java.net.URI;
import java.util.LinkedList;
import java.util.List;

import net.spy.memcached.internal.OperationFuture;

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;

import com.couchbase.client.CouchbaseClient;

/**
 * Cloud Connector
 *
 * @author Ryan Meyer.
 */
@Connector(name="couchbase", schemaVersion="1.0-SNAPSHOT")
public class CouchbaseConnector
{
    private CouchbaseClient client;	
	
    /**
     * The URI of the server you want to connect to - as a string.  Example: http://servername.com:8091/pools
     */
	@Configurable
    private String Uri;
	
    /**
     * The bucket name.  
     */	
    private String BucketName;
	
    /**
     * Establishes the database connection using the given bucket name and password.
     *
     * @param bucketName The bucket name in the cluster you wish to use.
     * @param password   The password for the bucket.  Default is empty.
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String bucketName, String password) throws ConnectionException {
            this.BucketName = bucketName;
            
    		List<URI> uris = new LinkedList<URI>();
    		uris.add(URI.create(this.Uri));            
    		
    		try {
				client = new CouchbaseClient(uris, bucketName, password);
			} catch (IOException e) {
				e.printStackTrace();
			}
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        client.shutdown();
        client = null;    	
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return client != null;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return this.BucketName;
    }

    /**
     * Get with a single key and decode using the default transcoder.
     * <p/>
     * {@sample.xml ../../../doc/Couchbase-connector.xml.sample couchbase:Get}
     *
     * @param key The key of the JSON object you want to retrieve.
     * @return String The JSON object.
     */
    @Processor
    public String Get(String key) {
        return client.get(key).toString();
    }
    
    /**
     * Store an object given a specific key.
     * <p/>
     * {@sample.xml ../../../doc/Couchbase-connector.xml.sample couchbase:Store}
     *
     * @param key The key of the JSON object you want to store.
     * @param value The value in JSON (as a string).
     */    
    @Processor
    public void Store(String key, String value)
    {
    	OperationFuture<Boolean> setOp = client.set(key, Integer.MAX_VALUE, value);

    	try 
		{
			if (setOp.get().booleanValue()) 
			{
				System.out.println("Set Succeeded");
		    } 
			else 
			{
				System.err.println("Set failed: " + setOp.getStatus().getMessage());
		    }
		} 
		catch (Exception e) 
		{
			System.err.println("Exception while doing set: " + e.getMessage());
		}	    	
    }
    
    /**
     * Remove an object given a specific key.
     * <p/>
     * {@sample.xml ../../../doc/Couchbase-connector.xml.sample couchbase:Remove}
     *
     * @param key The key of the JSON object you want to remove.
     */    
    @Processor
    public void Remove(String key)
    {
    	client.delete(key);
    }    

    public void setClient(CouchbaseClient client)
    {
    	this.client = client;
    }    
    
    public CouchbaseClient getClient()
    {
    	return this.client;
    }
    
    public void setUri(String uri) {
        this.Uri = uri;
    }      
    
    public String getUri() {
    	return this.Uri;
    }

    public void setBucketName(String bucketName)
    {
    	this.BucketName = bucketName;
    }
    
    public String getBucketName()
    {
    	return this.BucketName;
    }
}
